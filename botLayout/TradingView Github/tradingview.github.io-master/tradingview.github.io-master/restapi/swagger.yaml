---
swagger: '2.0'

################################################################################
#                              API Information                                 #
################################################################################ 
info:
  version: v1
  title: TradingView Broker API
  description: |
    # Overview
    This documentation describes the TradingView REST API, which was developed for brokers to connect their backend systems to the TradingView frontend to allow their customers to receive streaming data and send orders from TradingView. This documentation describes connecting to the [standalone Trading Terminal](https://www.tradingview.com/trading-terminal/) and the Trading Panel on [TradingView.com](http://www.tradingview.com/chart). 
    
    The Trading Terminal is a standalone product that is licensed to individual brokers. Being supported in the Trading Panel on TradingView.com requires certification and a separate license. Get in touch with [founders@tradingview.com](mailto:founders@tradingview.com) to manage the above details. Once licensed, use the REST API to build the bridge from your backend into our system to enable data flow and order execution.

    
    The Trading Terminal is a paid standalone B2B product that can be licensed to an individual company. Being supported on TradingView.com will require paid certification and monthly maintenance fees. Once you pick an option (or choose both), use the REST API to build your bridge from your backend into our system to enable data flow and order execution. 

    To be supported on [TradingView.com](http://www.tradingview.com/chart), you will also need to:
      - Provide a logo in SVG vector format
      - Let us know if you support TradingView symbology / support mapping
      - Let us know if you support TradingView data or support history / streaming requests
      
    ### When to use the REST API
    
    The REST API is a single solution to do both integrations - to the Trading Terminal and to be supported in the Trading Panel on [TradingView.com](http://www.tradingview.com/chart).
    
    If you need the Trading Terminal only, you can use this REST API or implement a client-side JavaScript adapter to your existing server API.
    
    This document is for those who use the REST API for the integration.

    ### ETag
    
    The REST API supports ETag on all GET requests. Usage of ETags will result in reduced data traffic and reduced latency.

    #### Using ETag

    Responses to successful GET requests will include the ETag header. This ETag value is a hash of the response body. Save this value if the GET request will be repeated.
    When making the same GET request, include the `If-None-Match` header with the ETag value saved from the previous GET response.
    If the data has not changed, HTTP code `304` is returned with no response body.
    If the data has changed, the response is returned as usual. A new ETag value is returned and this should be saved for future calls.
    
    ### Swagger
    
    This specification has been generaged using outstanding [Swagger](http://swagger.io) technology. Swagger will do most of the work for you. Download TradingView Swagger [specification](http://tradingview.github.io/restapi/swagger.yaml), Copy-Paste it into [Online Swagger Editor](http://editor.swagger.io/) and generate a server using of 1 of 26 frameworks.

################################################################################
#                  Host, Base Path, Schemes and Content Types                  #
################################################################################
host: api.broker.com
basePath: /tradingview/v1
schemes:
  - https
produces:
  - application/json
consumes:
  - application/json

################################################################################
#                                  Security                                    #
################################################################################
securityDefinitions:
  oauth:
    type: oauth2
    flow: password
    tokenUrl: https://api.broker.com/authorize/?client_id=CLIENT-ID
    description: Look for more request details in /authorize request. TradingView will set Authorization header to 'Bearer ' + access_token for all requests with authorization.
    scopes: 
      general: permission to perform all requests

################################################################################
#                                   Parameters                                 #
################################################################################
parameters:
  accountId:
    name: accountId
    in: path
    description: The account identifier
    type: string
    required: true
    
  orderId:
    name: orderId
    description: Order ID
    in: path
    type: string
    required: true
  
  positionId:
    name: positionId
    description: Position ID
    in: path
    type: string
    required: true
    
  symbol:
    name: symbol
    in: query
    description: Symbol name or ticker
    required: true
    type: string
  
  resolution:
    name: resolution
    in: query
    description: Symbol resolution. Possible resolutions are daily (`1D`, `2D` ... ), weekly (`1W`, `2W` ...), monthly (`1M`, `2M`...) and an intra-day resolution - minutes(`1`, `2` ...).
    required: true
    type: string
  
  from:
    name: from
    in: query
    description: Unix timestamp (UTC) of the leftmost required bar, including `from`.
    required: true
    type: number
    
  to:
    name: to
    in: query
    description: Unix timestamp (UTC) of the rightmost required bar, including `to`.
    required: true
    type: number
    
  countback:
    name: countback
    in: query
    description: Number of bars (higher priority than `from`) starting with `to`. If `countback` is set, `from` should be ignorred. It is used only by tradingview.com, Trading Terminal will never use it.
    type: number
    
  locale:
    name: locale
    in: query
    description: Locale (language) id
    type: string
    enum:
      - ar
      - cs
      - de
      - el
      - en
      - es
      - fa
      - fr
      - hu
      - it
      - ja
      - ko
      - nl
      - pl
      - pt
      - ro
      - ru
      - sk
      - sv
      - th
      - tr
      - vi
      - zh
    required: true

responses:
  200:
    description: OK
    schema:
      type: object
      required:
        - s
      properties:
        s:
          $ref: '#/definitions/Status'
        errmsg:
          type: string

tags:
  - name: site-trading-and-data
    description: Integration on TradingView.com (broker data and trading)
  - name: site-trading-only
    description: Integration on TradingView.com (when data is already available)
  - name: terminal
    description: Integration of Trading Terminal
  
################################################################################
#                                           Paths                              #
################################################################################

# Authorization

paths:
  /authorize:
    post:
      tags:
        - site-trading-and-data
        - site-trading-only
      description: Oauth2 Password authorization
      consumes: 
          - application/x-www-form-urlencoded
      parameters:
      - name: login
        in: formData
        description: User Login
        type: string
        required: true
      - name: password
        in: formData
        description: User Password
        type: string
        required: true
      responses:
        200:
          description: Access Token. TradingView will set Authorization header to 'Bearer ' + access_token for all requests with authorization.
          schema:
            type: object
            required:
              - s
            properties:
              s:
                $ref: '#/definitions/Status'
              errmsg:
                type: string
              d:
                $ref: '#/definitions/AuthorizationResponse'

# Trading
  /config:
    get:
      tags:
        - site-trading-and-data
        - site-trading-only
        - terminal
      security: 
        - oauth: []
      parameters:
        - $ref: '#/parameters/locale'
      description: Get localized configuration
      responses:
        200:
          description: Configuration
          schema:
            type: object
            required:
              - s
            properties:
              s:
                $ref: '#/definitions/Status'
              errmsg:
                type: string
              d:
                $ref: '#/definitions/ConfigResponse'

  /accounts:
    get:
      tags: 
        - site-trading-and-data
        - site-trading-only
        - terminal
      security: 
        - oauth: []
      description: Get a list of accounts owned by the user
      responses:
        200:
          description: Accounts list
          schema:
            type: object
            required:
              - s
            properties:
              s:
                $ref: '#/definitions/Status'
              errmsg:
                type: string
              d:
                type: array
                items:
                  $ref: '#/definitions/Account'
  
  /accounts/{accountId}/state:
    get:
      tags: 
        - site-trading-and-data
        - site-trading-only
        - terminal
      security: 
        - oauth: []
      description: Get account information.
      parameters:
        - $ref: '#/parameters/accountId'
        - $ref: '#/parameters/locale'
      responses:
        200:
          description: OK
          schema:
            type: object
            required:
              - s
            properties:
              s:
                $ref: '#/definitions/Status'
              errmsg:
                type: string
              d:
                $ref: '#/definitions/AccountStateResponse'

  /accounts/{accountId}/orders:
    get:
      tags: 
        - site-trading-and-data
        - site-trading-only
        - terminal
      security: 
        - oauth: []    
      description: Get pending orders for an account.
      parameters:
        - $ref: '#/parameters/accountId'
      responses:
        200:
          description: List of pending orders. It is also expected that broker returns orders filled/cancelled/rejected during current session.
          schema:
            type: object
            required:
              - s
            properties:
              s:
                $ref: '#/definitions/Status'
              errmsg:
                type: string
              d:
                type: array
                items:
                  $ref: '#/definitions/Order'
    post:
      tags: 
        - site-trading-and-data
        - site-trading-only
        - terminal
      security: 
        - oauth: []    
      description: Create a new order
      consumes: 
          - application/x-www-form-urlencoded
      parameters:
        - $ref: '#/parameters/accountId'
        - name: instrument
          in: formData
          description: Instrument to open the order on
          type: string
          required: true
        - name: qty
          in: formData
          description: The number of units to open order for
          type: number
          required: true
        - name: side
          in: formData
          description: "Side. Possible values - `buy` and `sell`."
          required: true
          type: string
          enum:
            - buy
            - sell
        - name: type
          in: formData
          description: Type. Possible values - `market`, `stop`, `limit`, `stoplimit`.
          required: true
          type: string
          enum:
            - market
            - stop
            - limit
            - stoplimit
        - name: limitPrice
          in: formData
          description: Limit Price for Limit or StopLimit order
          type: number
        - name: stopPrice
          in: formData
          description: Stop Price for Stop or StopLimit order
          type: number
        - name: durationType
          in: formData
          description: Duration ID (if supported)
          type: string
        - name: durationDateTime
          in: formData
          description: Expiration datetime UNIX timestamp (if supported by duration type)
          type: number
        - name: stopLoss
          in: formData
          description: StopLoss price (if supported)
          type: number
        - name: takeProfit
          in: formData
          description: TakeProfit price (if supported)
          type: number
      responses:
        200:
          description: Status. `message` should be filled if erroneous. `orderId` should present if successful.
          schema:
            type: object
            required:
              - s
            properties:
              s:
                $ref: '#/definitions/Status'
              errmsg:
                type: string
              d:
                type: object
                properties:
                  orderId:
                    type: string
                
  /accounts/{accountId}/ordersHistory:
    get:
      tags: 
        - site-trading-and-data
        - site-trading-only
        - terminal
      security: 
        - oauth: []    
      description: Get order history for an account. It is expected that returned orders will have a final status (rejected, filled, canceled). This request is optional. If you don't support history of orders set `AccountFlags::supportOrdersHistory` to `false`.
      parameters:
        - $ref: '#/parameters/accountId'
        - name: maxCount
          description: Maximum amount of orders to return
          in: query
          type: number
      responses:
        200:
          description: List of orders
          schema:
            type: object
            required:
              - s
            properties:
              s:
                $ref: '#/definitions/Status'
              errmsg:
                type: string
              d:
                type: array
                items:
                  $ref: '#/definitions/Order'
                
  /accounts/{accountId}/orders/{orderId}:
    get:
      tags: 
        - site-trading-and-data
        - site-trading-only
        - terminal
      security: 
        - oauth: []    
      description: Get an order for an account. It can be an active or historical order.
      parameters:
        - $ref: '#/parameters/accountId'
        - $ref: '#/parameters/orderId'
      responses:
        200:
          description: Order
          schema:
            type: object
            required:
              - s
            properties:
              s:
                $ref: '#/definitions/Status'
              errmsg:
                type: string
              d:
                $ref: '#/definitions/Order'
    put:
      tags: 
        - site-trading-and-data
        - site-trading-only
        - terminal
      security: 
        - oauth: []    
      description: Modify an existing order
      consumes: 
          - application/x-www-form-urlencoded
      parameters:
        - $ref: '#/parameters/accountId'
        - $ref: '#/parameters/orderId'
        - name: qty
          in: formData
          description: Number of units
          type: number
          required: true
        - name: limitPrice
          in: formData
          description: Limit Price for Limit or StopLimit order
          type: number
        - name: stopPrice
          in: formData
          description: Stop Price for Stop or StopLimit order
          type: number
        - name: stopLoss
          in: formData
          description: StopLoss price (if supported)
          type: number
        - name: takeProfit
          in: formData
          description: TakeProfit price (if supported)
          type: number
      responses:
        200:
          $ref: '#/responses/200'
    delete:
      tags: 
        - site-trading-and-data
        - site-trading-only
        - terminal
      security: 
        - oauth: []    
      description: Cancel an existing order
      parameters:
        - $ref: '#/parameters/accountId'
        - $ref: '#/parameters/orderId'
      responses:
        200:
          $ref: '#/responses/200'
      
  /accounts/{accountId}/positions:
    get:
      tags: 
        - site-trading-and-data
        - site-trading-only
        - terminal
      security: 
        - oauth: []    
      description: Get positions for an account
      parameters:
        - $ref: '#/parameters/accountId'
      responses:
        200:
          description: Array of positions
          schema:
            type: object
            required:
              - s
            properties:
              s:
                $ref: '#/definitions/Status'
              errmsg:
                type: string
              d:
                type: array
                items:
                  $ref: '#/definitions/Position'
                  
  /accounts/{accountId}/positions/{positionId}:
    get:
      tags: 
        - site-trading-and-data
        - site-trading-only
        - terminal
      security: 
        - oauth: []    
      description: Get a position for an account
      parameters:
        - $ref: '#/parameters/accountId'
        - $ref: '#/parameters/positionId'
      responses:
        200:
          description: Position object
          schema:
            type: object
            required:
              - s
            properties:
              s:
                $ref: '#/definitions/Status'
              errmsg:
                type: string
              d:
                $ref: '#/definitions/Position'
    put:
      tags: 
        - site-trading-and-data
        - site-trading-only
        - terminal
      security: 
        - oauth: []    
      description: Modify an existing position stop loss or take profit or both
      consumes: 
          - application/x-www-form-urlencoded
      parameters:
        - $ref: '#/parameters/accountId'
        - $ref: '#/parameters/positionId'
        - name: stopLoss
          in: formData
          description: StopLoss price
          type: number
        - name: takeProfit
          in: formData
          description: TakeProfit price
          type: number
      responses:
        200:
          $ref: '#/responses/200'
          
    delete:
      tags: 
        - site-trading-and-data
        - site-trading-only
        - terminal
      security: 
        - oauth: []    
      description: Close an existing position
      parameters:
        - $ref: '#/parameters/accountId'
        - $ref: '#/parameters/positionId'
      responses:
        200:
          $ref: '#/responses/200'
          
  /accounts/{accountId}/executions:
    get:
      tags: 
        - site-trading-and-data
        - site-trading-only
        - terminal
      security: 
        - oauth: []    
      description: Get a list of executions (i.e. fills or trades) for an account and an instrument. Executions are displayed on a chart
      parameters:
        - $ref: '#/parameters/accountId'
        - name: instrument
          description: Broker instrument name
          in: query
          type: string
          required: true
        - name: maxCount
          description: Maximum count of executions to return
          in: query
          type: number
      responses:
        200:
          description: List of executions
          schema:
            type: object
            required:
              - s
            properties:
              s:
                $ref: '#/definitions/Status'
              errmsg:
                type: string
              d:
                type: array
                items:
                  $ref: '#/definitions/Execution'
                
  /accounts/{accountId}/instruments:
    get:
      tags: 
        - site-trading-and-data
        - site-trading-only
        - terminal
      security: 
        - oauth: []
      description: Get a list of tradeable instruments that are available for trading with the account specified
      parameters:
        - $ref: '#/parameters/accountId'
      responses:
        200:
          description: List of instruments
          schema:
            type: object
            required:
              - s
            properties:
              s:
                $ref: '#/definitions/Status'
              errmsg:
                type: string
              d:
                type: array
                items:
                  $ref: '#/definitions/Instrument'
      
# Mapping
                
  /mapping:
    get:
      tags: 
        - site-trading-and-data
        - site-trading-only
      description: Return all broker instruments with corresponding TradingView instruments. It is required to add a Broker to TradingView.com. It is not required for Trading Terminal integration. This request works without authorization!
      responses:
        200:
          description: Broker - TradingView instruments map
          schema:
            $ref: '#/definitions/SymbolMapping'
        
# Data
          
  /symbol_info:
    get:
      tags: 
        - site-trading-and-data
        - terminal
      security:
        - oauth: []
      description: Get a list of all instruments
      responses:
        200:
          description: List of instruments
          schema:
            $ref: '#/definitions/SymbolInfoArrays'
  
  /history:
    get:
      tags:
        - site-trading-and-data
        - terminal
      security:
        - oauth: []
      description: Bars request. You can find examples in the [documentation](https://github.com/tradingview/charting_library/wiki/UDF#bars). 
      parameters:
        - $ref: '#/parameters/symbol'
        - $ref: '#/parameters/resolution'
        - $ref: '#/parameters/from'
        - $ref: '#/parameters/to'
        - $ref: '#/parameters/countback'
      responses:
        200:
          description: Response is expected to be an object with properties listed below. Each property is treated as a table column
          schema:
            $ref: '#/definitions/BarsArrays'
            
  /marks:
    get:
      tags:
        - terminal
      security:
        - oauth: []
      description: Request for bar marks (circles on top of bars). You can display custom marks only in the Trading Terminal
      parameters:
        - $ref: '#/parameters/symbol'
        - $ref: '#/parameters/resolution'
        - $ref: '#/parameters/from'
        - $ref: '#/parameters/to'
      responses:
        200:
          description: Response is expected to be an object with properties listed below. Each property is an array
          schema:
            $ref: '#/definitions/MarksArrays'
            
  /timescale_marks:
    get:
      tags:
        - terminal
      security:
        - oauth: []
      description: Request for timescale marks (circles on the timescale). You can display custom marks only in the Trading Terminal
      parameters:
        - $ref: '#/parameters/symbol'
        - $ref: '#/parameters/resolution'
        - $ref: '#/parameters/from'
        - $ref: '#/parameters/to'
      responses:
        200:
          description: Response is expected to be an array.
          schema:
            type: array
            items:
              $ref: '#/definitions/TimescaleMark'
            
  /quotes:
    get:
      tags:
        - site-trading-and-data
        - site-trading-only
        - terminal
      security:
        - oauth: []
      description: Get current prices of the instrument. You can see an example of this response [here](https://demo_feed.tradingview.com/quotes?symbols=AAPL%2CMSFT%2CIBM%2CNasdaqNM%3AAAPL).
      parameters:
        - name: symbols
          in: query
          type: string
          description: comma separated symbols
          required: true
      responses:
        200:
          description: Current prices
          schema:
            type: object
            properties:
              s: 
                $ref: '#/definitions/Status'
              errmsg:
                description: Error message
                type: string
              d:
                description: Data
                type: array
                items:
                  $ref: '#/definitions/QuotesResponse'
                  
  /streaming:
    get:
      tags:
        - site-trading-and-data
      security:
        - oauth: []
      description: "Stream of prices. Server constantly keeps the connection alive. If the connection is broken the server constantly tries to restore it. Transfer mode is 'chunked encoding'. The data feed should set 'Transfer-Encoding: chunked' and make sure that all intermediate proxies are set to use this mode. All messages are finished with '\\n'. Streaming data should contain real-time only. It shouldn't contain snapshots of data."
      responses:
        200:
          description: | 
            Data feed should provide ticks (trades, asks, bids) and daily bars. 
            
            If there is no trades the data feed should set trades to bids. 
            
            If there is only ask/bid implementation you must also set the trade (same as bid but it's size must be >= 1).
            
            Size for trades is always >= 1 except for a correction. In case of correction size can be 0. 
            
            All times should be UNIX time UTC. 
            
            Daily bars are required if they cannot be built from ticks (has_dwm should be set to true in the symbol information). 
            
            Fields for asks, bids and trades: `id`, `p`, `s` (optional for asks and bids), `t`, `f`. 
            
            Fields for daily bars: `id`, `t`, `o`, `h`, `l`, `c`, `v`.
            
            Messages:
            1. trade `{"id":"symbol","p":price,"s":size,"t":time}`
            2. ask `{"id":"symbol","p":price,"s":size,"t":time,"f":"a"}`
            3. bid `{"id":"symbol","p":price,"s":size,"t":time,"f":"b"}`
            4. daily bar `{"id":"symbol","o":open,"h":high,"l":low,"c":close,"v":volume,"t":time,"f":"d"}`
          schema:
            type: object
            required:
              - id
              - t
            properties:
              id:
                description: Symbol
                type: string
              p:
                description: Price
                type: number
              s:
                description: Size
                type: number
              t:
                description: Time
                type: number
              f:
                description: Type (a - ask, b - bid, t - trade, d - daily bar). Default value is `t` (trade).
                type: string
                enum:
                  - a
                  - b
                  - d
                  - t
              o:
                description: Open
                type: number
              h:
                description: High
                type: number
              l:
                description: Low
                type: number
              c: 
                description: Close
                type: number
              v:
                description: Volume
                type: number

      
  ###############################################################################
definitions:
  Status:
    type: string
    enum:
      - ok
      - error
      
  AuthorizationResponse:
    description: Authorization Response
    type: object
    required:
      - access_token
      - expiration
    properties:
      access_token:
        description: Access token acts as a session ID that the application uses for making requests. This token should be protected as if it were user credentials
        type: string
      expiration:
        description: The time when the token is expired is represented as the number of seconds since the Unix epoch (00:00:00 UTC on 1 January 1970)
        type: number
      
  ConfigResponse:
    type: object
    properties:
      accountManager:
        type: array
        description: Localized account manager's tables configuration. Account Manager is a page in the bottom widget. This page can have multiple tables. Data of the tables is filled using `/state` response.
        items:
          $ref: '#/definitions/AccountManagerTable'
      durations:
        type: array
        description: Localized array of durations displayed in Order Ticket
        items:
          $ref: '#/definitions/Duration'
      pullingInterval:
        $ref: '#/definitions/PullingInterval'
          
  AccountStateResponse:
    type: object
    required:
      - balance
      - unrealizedPl
    properties:
      balance:
        description: Account Balance
        type: number
      unrealizedPl:
        description: Unrealized Profit/loss
        type: number
      amData:
        description: Account Manager data. Structure of Account Manager is defined by `/config` response. Each element of this array is a table.
        type: array
        items:
          description: Single Account Manager table data. Each element of this array is a table row
          type: array
          items:
            description: Account Manager table rows data. Each element of this array is a table cell
            type: array
            items:
              type: string
      
  Duration:
    description: Single duration option
    type: object
    required:
      - id
      - title
    properties:
      id:
        type: string
      title:
        description: Localized title
        type: string
      hasDatePicker:
        description: Display date control in Order Ticket for this duration type
        type: boolean
      hasTimePicker:
        description: Display time control in Order Ticket for this duration type
        type: boolean
        
      
  AccountManagerTable:
    type: object
    required:
      - id
      - title
      - columns
    properties:
      id:
        type: string
      title:
        description: Localized title of a table
        type: string
      columns:
        type: array
        items:
          $ref: '#/definitions/AccountManagerColumn'
      
  AccountManagerColumn:
    type: object
    required:
      - id
      - title
    properties:
      id:
        type: string
      title:
        description: Localized title of a column
        type: string
      tooltip:
        description: Tooltip that is shown on mouse hover
        type: string
      fixedWidth:
        description: Set it to true if data length is frequently changed
        type: boolean
      sortable:
        description: Set it to false if this columns data should not be sortable
        type: boolean
      
  Account:
    type: object
    required:
      - id
      - name
      - config
    properties:
      id:
        type: string
      name:
        description: Account title that is displayed to a user
        type: string
      currency:
        description: Abbreviation of account currency
        type: string
      currencySign:
        description: Account currency symbol
        type: string
      config:
        $ref: '#/definitions/AccountFlags'
        
  AccountFlags:
    type: object
    properties:
      showQuantityInsteadOfAmount:
        description: Renames Amount to Quantity in the Order Ticket
        type: boolean
      supportDOM:
        description: Whether you want for DOM (Depth of market) widget to be available
        type: boolean
      supportBrackets:
        description: Whether you support brackets
        type: boolean
      supportClosePosition:
        description: Whether you support closing of a position without a need for a user to fill an order. If it is `true` the Trading Terminal shows a confirmation dialog and sends a DELETE request instead of bringing up an order ticket.
        type: boolean
      supportEditAmount:
        description: Whether you support editing orders quantity. If you set it to `false`, the quantity control in the order ticket will be disabled when modifing an order.
        type: boolean
      supportLevel2Data:
        description: Whether you support Level 2 data. It is required to display DOM levels. You must implement `/streaming` to display DOM.
        type: boolean
      supportMultiposition:
        description: Whether you support multiple positions at one instrument at the same time
        type: boolean
      supportPLUpdate:
        description: Whether you provide `unrealizedPl` for positions. Otherwise P&L will be calculated automatically based on a simple algorithm
        type: boolean
      supportReducePosition:
        description: Reserved for future use
        type: boolean
      supportStopLimitOrders:
        description: Whether you support StopLimit orders
        type: boolean
      supportOrdersHistory:
        description: Whether you support /ordersHistory request
        type: boolean
      supportExecutions:
        description: Whether you support /executions request
        type: boolean

  Instrument:
    type: object
    required:
      - name
      - description
    properties:
      name:
        description: Broker instrument name
        type: string
      description:
        description: Instrument description
        type: string
      minQty:
        description: Minimum quantity for trading
        type: number
      maxQty:
        description: Maximum quantity for trading
        type: number
      qtyStep:
        description: Quantity step
        type: number
      pipSize:
        description: Size of 1 pip
        type: number
      pipValue:
        description: Value of 1 pip in account currency
        type: number
      minTick:
        description: Minimum price movement
        type: number
        
  Order:
    type: object
    required:
      - id
      - instrument
      - qty
      - side
      - type
      - status
    properties:
      id:
        type: string
      instrument:
        description: Instrument name that is used on a broker's side
        type: string
      qty:
        description: Quantity
        type: number
      side:
        description: Side. Possible values - "buy" and "sell".
        type: string
        enum:
          - buy
          - sell
      type:
        description: Type. Possible values - "market", "stop", "limit", "stoplimit".
        type: string
        enum:
          - market
          - stop
          - limit
          - stoplimit
      filledQty:
        description: Filled quantity.
        type: number
      avgPrice:
        description: Average price of order fills. It should be provided for filled / partly filled orders.
        type: number
      limitPrice:
        description: Limit Price for Limit or StopLimit order.
        type: number
      stopPrice:
        description: Stop Price for Stop or StopLimit order.
        type: number
      parentId:
        description: Identifier of a parent order or a parent position (for position brackets) depending on `parentType`. Should be set only for bracket orders.
        type: string
      parentType:
        description: Type of order's parent. Should be set only for bracket orders.
        type: string
        enum:
          - order
          - position
      duration:
        description: Expiration type and UNIX timestamp date/time
        type: object
        required:
          - type
        properties:
          type:
            description: Duration ID. Internal ID that you set in ConfigResponse.
            type: string
          datetime:
            description: Unit timestamp (UTC)
            type: number
      status:
        description: |
          String constants to describe an order status.
          
          `Status`  | Description 
          ----------|-------------
          pending   | order is not created on a broker's side yet 
          inactive   | bracket order is created but waiting for a base order to be filled 
          working    | order is created but not executed yet 
          rejected  | order is rejected for some reason 
          filled    | order is fully executed 
          canceled  | order is canceled 
        type: string
        enum:
          - pending
          - inactive
          - working
          - rejected
          - filled
          - cancelled
      
  Position:
    type: object
    required:
      - id
      - instrument
      - qty
      - side
      - avgPrice
      - unrealizedPl
    properties:
      id:
        type: string
      instrument:
        description: Instrument name that is used on a broker's side
        type: string
      qty:
        description: Quantity
        type: number
      side:
        description: Side. Possible values - "buy" and "sell".
        type: string
        enum:
          - buy
          - sell
      avgPrice:
        description: Average price of position trades
        type: number
      unrealizedPl:
        description: Unrealized (open) profit/loss
        type: number
      realizedPl:
        description: Realized profit/loss for this instrument
        type: number
      
  Execution:
    type: object
    required:
      - id
      - instrument
      - price
      - time
      - qty
      - side
    properties:
      id:
        description: Unique identifier
        type: string
      instrument:
        description: Instrument id
        type: string
      price:
        description: Execution price
        type: number
      time:
        description: Execution time
        type: number
      qty:
        description: Execution quantity
        type: number
      side:
        description: Side. Possible values - "buy" and "sell".
        type: string
        enum:
          - buy
          - sell
          
  SymbolInfoArrays:
    type: object
    description: SymbolInfo is an object containing symbols metadata. Each value of this object is an array of values which size is equal to symbols count or a single value that is applied to all symbols.
    required:
      - symbol
      - description
      - exchange-listed
      - exchange-traded
      - minmovement
      - pricescale
      - timezone
      - session-regular
    properties:
      symbol:
        description: It's name of a symbol. It is a string which your users will see. Also, it will be used for data requests if you are not using tickers.
        type: array
        items:
          type: string
      description:
        description: Description of a symbol. Will be printed in chart legend for this symbol.
        type: array
        items:
          type: string
      exchange-listed:
        description: Short name of exchange where this symbol is listed
        type: array
        items:
          type: string
      exchange-traded:
        description: Short name of exchange where this symbol is traded
        type: array
        items:
          type: string
      minmovement:
        description: Minimal integer price change
        type: array
        items:
          type: number
      minmov2:
        description: It's a number for complex price formatting cases
        type: array
        items:
          type: number
      fractional:
        description: Boolean showing whether this symbol wants to have complex price formatting (see minmov2) or not
        type: array
        items:
          type: boolean
      pricescale:
        description: MinimalPossiblePriceChange = minmovement / pricescale
        type: array
        items:
          type: number
      has-intraday:
        description: Boolean showing whether symbol has intraday (minutes) history data. If it's false then all buttons for intradays resolutions will be disabled when this symbol is active in chart. If it is set to true, all resolutions that are supplied directly by the datafeed must be provided in intraday_multipliers array.
        type: array
        items:
          type: boolean
      has-no-volume:
        description: Boolean showing whether symbol has volume data or not
        type: array
        items:
          type: boolean
      type:
        description: Symbol type (forex/stock etc.)
        type: array
        items:
          type: string
      ticker:
        description: It's an unique identifier for this symbol in your symbology. If you specify this property then its value will be used for all data requests for this symbol. ticker is treated to be equal to symbol if not specified explicitly.
        type: array
        items:
          type: string
      timezone:
        description: Exchange timezone for this symbol. We expect to get name of time zone in olsondb format
        type: array
        items:
          type: string
        enum:
          - America/New_York
          - America/Los_Angeles
          - America/Chicago
          - America/Phoenix
          - America/Toronto
          - America/Vancouver
          - America/Argentina/Buenos_Aires
          - America/El_Salvador
          - America/Sao_Paulo
          - America/Bogota
          - Europe/Moscow
          - Europe/Athens
          - Europe/Berlin
          - Europe/London
          - Europe/Madrid
          - Europe/Paris
          - Europe/Warsaw
          - Australia/Sydney
          - Australia/Brisbane
          - Australia/Adelaide
          - Australia/ACT
          - Asia/Almaty
          - Asia/Ashkhabad
          - Asia/Tokyo
          - Asia/Taipei
          - Asia/Singapore
          - Asia/Shanghai
          - Asia/Seoul
          - Asia/Tehran
          - Asia/Dubai
          - Asia/Kolkata
          - Asia/Hong_Kong
          - Asia/Bangkok
          - Pacific/Auckland
          - Pacific/Chatham
          - Pacific/Fakaofo
          - Pacific/Honolulu
          - America/Mexico_City
          - Africa/Johannesburg
          - Asia/Kathmandu
          - US/Mountain
      session-regular:
        description: Trading hours for this symbol. See the [Trading Sessions](https://github.com/tradingview/charting_library/wiki/Trading-Sessions) article to know more details.
        type: array
        items:
          type: string
      supported-resolutions:
        description: An array of resolutions which should be enabled in resolutions picker for this symbol. Each item of an array is expected to be a string.
        type: array
        items:
          type: array
          items:
            type: string
      has-daily:
        description: The boolean value showing whether datafeed has its own D resolution bars or not. If has_daily = false then Charting Library will build respective resolutions from intraday by itself. If not, then it will request those bars from datafeed.
        type: array
        items:
          type: boolean
      intraday-multipliers:
        description: It is an array containing intraday resolutions (in minutes) the datafeed wants to build by itself. E.g., if the datafeed reported he supports resolutions ["1", "5", "15"], but in fact it has only 1 minute bars for symbol X, it should set intraday_multipliers of X = [1]. This will make Charting Library to build 5 and 15 resolutions by itself.
        type: array
        items:
          type: array
          items:
            type: string
      has-weekly-and-monthly:
        description: The boolean value showing whether datafeed has its own W and M resolution bars or not. If has_weekly_and_monthly = false then Charting Library will build respective resolutions from D by itself. If not, then it will request those bars from datafeed.
        type: array
        items:
          type: boolean
          
  BarsArrays:
    type: object
    description: Bars data.
    required:
      - s
    properties:
      s:
        description: Status code.
        type: string
        enum:
          - ok
          - error
          - no_data
      errmsg:
        description: Error message. Should be provided if s = "error"
        type: string
      nb:
        description: unix time of the next bar if there is no data (status code is no_data) in the requested period (optional)
        type: number
      t:
        description: bar time, unix timestamp (UTC). Daily bars should only have the date part, time should be 0.
        type: array
        items:
          type: number
      o:
        description: open price
        type: array
        items:
          type: number
      h:
        description: high price
        type: array
        items:
          type: number
      l:
        description: low price
        type: array
        items:
          type: number
      c:
        description: close price
        type: array
        items:
          type: number
      v:
        description: volume
        type: array
        items:
          type: number
          
  MarksArrays:
    type: object
    description: Bar marks data.
    required:
      - id
      - time
      - label
    properties:
      id:
        description: Unique identifiers of marks.
        type: array
        items:
          type: number
      time:
        description: bar time, unix timestamp (UTC)
        type: array
        items:
          type: number
      color:
        description: Mark colors
        type: array
        items:
          type: string
        enum:
          - red
          - green
          - blue
          - yellow
      text:
        description: mark popup text. HTML supported
        type: array
        items:
          type: string
      label:
        description: a letter to be printed on a mark. Single character
        type: array
        items:
          type: string
      labelFontColor:
        description: color of a letter on a mark
        type: array
        items:
          type: string
        enum:
          - red
          - green
          - blue
          - yellow
      minSize:
        description: minimal size of mark (diameter, pixels)
        type: array
        items:
          type: number
          
  TimescaleMark:
    type: object
    description: Timescale marks data.
    required:
      - id
      - time
      - label
    properties:
      id:
        description: Unique identifier of marks
        type: string
      time:
        description: bar time, unix timestamp (UTC)
        type: number
      color:
        description: Mark color
        type: string
        enum:
          - red
          - green
          - blue
          - yellow
      tooltip:
        description: Tooltip text
        type: string
      label:
        description: A letter to be printed on a mark. Single character
        type: string
          
  QuotesResponse:
    type: object
    description: Price response for an instrument
    required:
      - s
      - n
      - v
    properties:
      s:
        $ref: '#/definitions/Status'
      n:
        description: Symbol name. Should be equal to the requested one
        type: string
      v:
        $ref: '#/definitions/SingleQuote'
        
  SingleQuote:
    type: object
    description: Price data for an instrument
    properties:
      ch:
        description: Change (displayed in Watch and Detail)
        type: number
      chp:
        description: Change percent (displayed in Watch and Detail)
        type: number
      lp:
        description: Last price
        type: number
      ask:
        description: Ask price
        type: number
      bid:
        description: Bid price
        type: number
      open_price:
        description: Open
        type: number
      high_price:
        description: High price
        type: number
      low_price:
        description: Low price
        type: number
      prev_close_price:
        description: Previous close price
        type: number
      volume:
        description: Volume
        type: number
        
  SymbolMapping:
    type: object
    description: Map of Broker instrument names and TradingView instrument names
    properties:
      symbols:
        type: array
        items:
          $ref: '#/definitions/SingleMapping'
      fields:
        description: Array with the only one element `['brokerSymbol']`.
        type: array
        items:
          $ref: '#/definitions/SingleField'
          
  SingleField:
    type: string
    enum:
      - "brokerSymbol"
    description: Constant. Set it to "brokerSymbol".
          
  SingleMapping:
    type: object
    description: Map of Broker instrument name to TradingView instrument name
    properties:
      f:
        description: An array with the only one string element - broker symbol name
        type: array
        items:
          type: string
      s:
        description: TradingView symbol name with prefix (AA:XXXX)
        type: string
        
  PullingInterval:
    type: object
    description: Time intervals in milliseconds that Trading Terminal uses to pull data from the server
    properties:
      history:
        description: Time interval in milliseconds that Trading Terminal uses to request chart real-time bar udpates. Default value is 500 ms
        type: number
      quotes:
        description: Time interval in milliseconds that Trading Terminal uses to request quote udpates. Default value is 500 ms
        type: number
      orders:
        description:  Time interval in milliseconds that Trading Terminal uses to request orders. Default value is 500 ms
        type: number
      positions:
        description:  Time interval in milliseconds that Trading Terminal uses to request positions. Default value is 1000 ms
        type: number
      accountManager: 
        description: Time interval in milliseconds that Trading Terminal uses to update Account Manager tables. Default value is 500 ms
        type: number
      